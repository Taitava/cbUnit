
// Variables:
// @ application_directory: string, contains the root directory of the testable application. Root directory = parent of "tests" directory.
// @ cbunit_directory: string, contains the directory where cbUnit files are located.
// @ test_file_path: string, contains a directory + file name to a test_*.cb file that we should include into the program
// @ output_file_path: string, contains a directory + file name to where we will write the test result. The file will be overwritten if it exists.
// @ is_running_crash_plan: bool, True if the program is meant to call hook_CrashPlan() function instead of normal test_*() functions.
// (You will only see these variable names if you view test-main.skeleton.cb. If you view your generated test program source code, the variables are substituted with their corresponding values.)

Const CBUNIT_OUTPUT_FILE_PATH = "@output_file_path"
Const CBUNIT_TEST_FILE_PATH = "@test_file_path"

ChDir "@application_directory"

// Include the user-defined test file. (Do this before any other includes in order to try to get possible compiler errors to - most of the time - point to the correct file, which usually is the test_*.cb file. The compiler has a bug that it some times reports an incorrect file for syntax errors.)
Include "@test_file_path"

// Include runtime test handling tools & basic assertion related tools
Include "@cbunit_directory\cbUnit.runtime.cb"
Include "@cbunit_directory\cbUnit.asserts.cb"

// Hook for test_*.cb to do preparations. (But call it only in normal test program, not when recurring after a crash.)
If Not @is_running_crash_plan Then
	cbUnit_SetCurrentContext("hook_Setup")
	hook_Setup()
	cbUnit_SetCurrentContext("") // Mark that we are now outside of any functions.
EndIf

// INSERT TEST CALLS HERE //

cbUnit_EndProgram()
