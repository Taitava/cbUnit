
//
// PUBLIC FUNCTIONS
// Keep the functions ordered by the following rules:
// - Group by category.
// - Sort alphabetically.
// - Exception to aplhabetical order: AssertNot*() functions should follow immediately after their non-not counterparts.
//
// 'Not' functions should have the 'Not' appear right after 'Assert'! For example, correct: AssertNotFileExists(), incorrect: AssertFileNotExists()

Function Assert(condition, message$="Assertion condition should be true.", a$="",b$="",c$="",d$="")
	Dim app.cbUnit_Application
	
	app = cbUnit_GetApplication()
	app\count_tests = app\count_tests + 1
	If condition Then
		// Test succeeded
		app\count_successes = app\count_successes + 1
		Return True
	Else
		// Test failed
		app\count_failures = app\count_failures + 1
		cbUnit_Fail(cbUnit_FillMessage(message, a,b,c,d))
		If Upper(Str(CBUNIT_STOP_AT)) = "ASSERT" Then
			hook_CleanupTest(app\current_context) // Hook For test_*.cb To do cleanup. Not called in cbUnit_EndProgram() because otherwise the hook would be called twice For the Last test Function of the file, because test-call.skeleton.cb calls this too.
			cbUnit_EndProgram()
		EndIf
		Return False
	EndIf
EndFunction

Function AssertNot(condition, message$="Assertion condition should be false.")
	Return Assert(Not condition, message)
EndFunction


// Equals
Function AssertEquals(a$, b$, message$ = "a$ should be equal to b$.")
	Return Assert(a = b, message, a,b)
EndFunction

Function AssertNotEquals(a$, b$, message$ = "a$ should not be equal to b$.")
	Return Assert(a <> b, message, a,b)
EndFunction

Function AssertGreater(a$, b$, message$ = "a$ should be greater than b$.")
	Return Assert(a > b, message, a,b)
EndFunction

Function AssertGreaterOrEqual(a$, b$, message$ = "a$ should be greater than or equal to b$.")
	Return Assert(a >= b, message, a,b)
EndFunction

Function AssertLess(a$, b$, message$ = "a$ should be less than b$.")
	Return Assert(a < b, message, a,b)
EndFunction

Function AssertLessOrEqual(a$, b$, message$ = "a$ should be less than or equal to b$.")
	Return Assert(a <= b, message, a,b)
EndFunction


// Strings
Function AssertBeginsWith(a$, b$, ignore_case=0, message="a$ should begin with b$.")
	If ignore_case Then a = Lower(a) : b = Lower(b)
	Return Assert(Left(a,Len(b)) = b, message, a,b)
EndFunction

Function AssertNotBeginsWith(a$, b$, ignore_case=0, message="a$ should not begin with b$.")
	If ignore_case Then a = Lower(a) : b = Lower(b)
	Return Assert(Left(a,Len(b)) <> b, message, a,b)
EndFunction

Function AssertEmpty(a$, message$="a$ should be an empty string.")
	Return Assert(a = "", message, a)
EndFunction

Function AssertNotEmpty(a$, message$="a$ should not be an empty string.")
	Return Assert(a <> "", message, a)
EndFunction

Function AssertEndsWith(a$, b$, ignore_case=0, message="a$ should end with b$.")
	If ignore_case Then a = Lower(a) : b = Lower(b)
	Return Assert(Right(a,Len(b)) = b, message, a,b)
EndFunction

Function AssertNotEndsWith(a$, b$, ignore_case=0, message="a$ should not end with b$.")
	If ignore_case Then a = Lower(a) : b = Lower(b)
	Return Assert(Right(a,Len(b)) <> b, message, a,b)
EndFunction

Function AssertInStr(a$, b$, ignore_case=0, message$="b$ should be present in a$.")
	If ignore_case Then a = Lower(a) : b = Lower(b)
	Return Assert(InStr(a,b) > 0, message, a,b)
EndFunction

Function AssertNotInStr(a$, b$, ignore_case=0, message$="b$ should not be present in a$.")
	If ignore_case Then a = Lower(a) : b = Lower(b)
	Return Assert(InStr(a,b) = 0, message, a,b)
EndFunction

Function AssertIsLower(a$, message$="a$ should not contain any uppercase letters.")
	Return Assert(Lower(a) = a, message, a)
EndFunction

Function AssertIsUpper(a$, message$="a$ should not contain any lowercase letters.")
	Return Assert(Upper(a) = a, message, a)
EndFunction

Function AssertLen(a$, b$, message$="The length of a$ should be b$, now it's c$.")
	Return Assert(Len(a) = Int(b), message, a, b, Len(a))
EndFunction


// Math
Function AssertMaxDifference(a#, b#, c#, message$="The difference between a$ and $b should be $c at maximum. Now the difference is d$.")
	Dim difference#
	difference = Abs(a-b)
	Return Assert(difference <= c, message, a,b,c,difference)
EndFunction

Function AssertMinDifference(a#, b#, c#, message$="The difference between a$ and $b should be $c at minimum. Now the difference is d$.")
	Dim difference#
	difference = Abs(a-b)
	Return Assert(difference >= c, message, a,b,c,difference)
EndFunction

// a: The value whose sign should be tested.
// b: The assumed sign, either -1 or 1. Or in some cases 0, but then a is supposed to be zero too, so then you could be using AssertZero(a) instead.
// zero_sign: If a happens to be zero, this determines the sign for it, because it might depend on case, which sign we want to use for zero. Defaults to 0.
Function AssertSign(a#,b, zero_sign=0, message$="The sign of number a$ should be b$, but it is c$.")
	Dim sign
	
	If a = 0 Then
		sign = zero_sign
	Else
		sign = a/Abs(a)
	EndIf
	Return Assert(sign = b, message, a,b,sign)
EndFunction

Function AssertZero(a$, message$="a$ should be zero.") // Use a$ instead of a# so that we can assure that "" is not accidentally interpreted as 0.
	Return Assert(a="0" Or a="0.0", message, a)
EndFunction




// Data types
Function AssertBool(a$, message$="a$ should be 0 or 1.")
	Return Assert(a = "0" Or a = "1", message, a) // Should we consider 0.0 And 1.0 too? Maybe Not.
EndFunction

Function AssertFloat(a$, message$="a$ should be a float.")
	Return Assert(Str(Float(a)) = a, message, a)
EndFunction

Function AssertInteger(a$, message$="a$ should be an integer.")
	Return Assert(Str(Int(a)) = a, message, a)
EndFunction

Function AssertIntegerOrFloat(a$, message$="a$ should be an integer or a float.")
	Dim is_integer, is_float
	
	is_integer = Str(Int(a)) = a
	is_float = Str(Float(a)) = a
	Return Assert(is_integer Or is_float, message, a)
EndFunction


// Files
Function AssertFileExists(a$, accept_directory=0, message$="")
	Dim condition
	If accept_directory Then
		condition = FileExists(a)
		If message = "" Then message = "File o"+"r directory a$ should exist."
	Else
		condition = FileExists(a) And False=IsDirectory(a)
		If message = "" Then message = "File a$ should exist And must n"+"ot be a directory."
	EndIf
	Return Assert(condition, message, a)
EndFunction

Function AssertNotFileExists(a$, accept_directory=0, message$="")
	Dim condition
	If accept_directory Then
		condition = Not FileExists(a)
		If message = "" Then message = "File o"+"r directory a$ should not exist."
	Else
		condition = False=FileExists(a) Or IsDirectory(a)
		If message = "" Then message = "File a$ should not exist (but a directory with that name would be allowed, although that's n"+"ot the c"+"ase now)."
	EndIf
	Return Assert(condition, message, a)
EndFunction

Function AssertDirectoryExists(a$, accept_directory=1, message$="Directory a$ should exist.")
	Return Assert(IsDirectory(a), message, a)
EndFunction

Function AssertNotDirectoryExists(a$, accept_directory=1, message$="Directory a$ should exist.")
	Return Assert(Not IsDirectory(a), message, a)
EndFunction
