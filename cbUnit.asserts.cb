
//
// PUBLIC FUNCTIONS
//

Function Assert(condition, message$="Assertion condition should be true.", a$="",b$="",c$="")
	Dim app.cbUnit_Application
	
	app = cbUnit_GetApplication()
	app\count_tests = app\count_tests + 1
	If condition Then
		// Test succeeded
		app\count_successes = app\count_successes + 1
	Else
		// Test failed
		app\count_failures = app\count_failures + 1
		cbUnit_Fail(cbUnit_Substitute(message, a,b,c))
		If Upper(Str(CBUNIT_STOP_AT)) = "ASSERT" Then cbUnit_EndProgram()
	EndIf
EndFunction


// Equals
Function AssertEquals(a$, b$, message$ = "a$ should be equal to b$.")
	Assert(a = b, message, a,b)
EndFunction

Function AssertNotEquals(a$, b$, message$ = "a$ should not be equal to b$.")
	Assert(a <> b, message, a,b)
EndFunction

Function AssertLess(a$, b$, message$ = "a$ should be less than b$.")
	Assert(a < b, message, a,b)
EndFunction

Function AssertLessOrEqual(a$, b$, message$ = "a$ should be less than or equal to b$.")
	Assert(a <= b, message, a,b)
EndFunction

Function AssertGreater(a$, b$, message$ = "a$ should be greater than b$.")
	Assert(a > b, message, a,b)
EndFunction

Function AssertGreaterOrEqual(a$, b$, message$ = "a$ should be greater than or equal to b$.")
	Assert(a >= b, message, a,b)
EndFunction


// Strings
Function AssertEmptyString(a$, message$="a$ should be an empty string.")
	Assert(a = "", message, a)
EndFunction

Function AssertNotEmptyString(a$, message$="a$ should not be an empty string.")
	Assert(a <> "", message, a)
EndFunction

Function AssertInStr(a$, b$, message$="b$ should be present in $a.")
	Assert(InStr(a,b) > 0, message, a,b)
EndFunction

Function AssertNotInStr(a$, b$, message$="b$ should not be present in $a.")
	Assert(InStr(a,b) = 0, message, a,b)
EndFunction

Function AssertBeginsWith(a$, b$, message="a$ should begin with b$.")
	Assert(Left(a,Len(b)) = b, message, a,b)
EndFunction

Function AssertEndsWith(a$, b$, message="a$ should end with b$.")
	Assert(Right(a,Len(b)) = b, message, a,b)
EndFunction

Function AssertNotBeginsWith(a$, b$, message="a$ should not begin with b$.")
	Assert(Left(a,Len(b)) <> b, message, a,b)
EndFunction

Function AssertNotEndsWith(a$, b$, message="a$ should not end with b$.")
	Assert(Right(a,Len(b)) <> b, message, a,b)
EndFunction

Function AssertIsLower(a$, message$="a$ should not contain any uppercase letters.")
	Assert(Lower(a) = a, message, a)
EndFunction

Function AssertIsUpper(a$, message$="a$ should not contain any lowercase letters.")
	Assert(Upper(a) = a, message, a)
EndFunction


// Math
Function AssertZero(a$, message$="a$ should be zero.") // Use a$ instead of a# so that we can assure that "" is not accidentally interpreted as 0.
	Assert(a="0" Or a="0.0", message, a)
EndFunction

// a: The value whose sign should be tested.
// b: The assumed sign, either -1 or 1. Or in some cases 0, but then a is supposed to be zero too, so then you could be using AssertZero(a) instead.
// zero_sign: If a happens to be zero, this determines the sign for it, because it might depend on case, which sign we want to use for zero. Defaults to 0.
Function AssertSign(a#,b, zero_sign=0, message$="The sign of number a$ should be b$, but it is c$.")
	Dim sign
	
	If a = 0 Then
		sign = zero_sign
	Else
		sign = a/Abs(a)
	EndIf
	Assert(sign = b, message, a,b,sign)
EndFunction




// Data types
Function AssertInteger(a$, message$="a$ should be an integer.")
	Assert(Str(Int(a)) = a, message, a)
EndFunction

Function AssertFloat(a$, message$="a$ should be a float.")
	Assert(Str(Float(a)) = a, message, a)
EndFunction

Function AssertIntegerOrFloat(a$, message$="a$ should be an integer or a float.")
	Dim is_integer, is_float
	
	is_integer = Str(Int(a)) = a
	is_float = Str(Float(a)) = a
	Assert(is_integer Or is_float, message, a)
EndFunction
