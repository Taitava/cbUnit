
//
// PRIVATE DEFINITIONS
//

Type cbUnit_Application
	Field id
	Field count_tests
	Field count_successes
	Field count_failures
	Field current_context$ // Currently executing test_*() function name.
EndType

Type cbUnit_Failure
	Field id
	Field context$ // Under which test_*() Function this failure occurred.
	Field message$
EndType


//
// PRIVATE FUNCTIONS
// May only be called within this file, or in *.skeleton.cb files
//

Function cbUnit_GetApplication()
	app.cbUnit_Application = First(cbUnit_Application)
	If NULL = app Then
		app = New(cbUnit_Application)
		app\id = ConvertToInteger(app)
	EndIf
	Return app\id
EndFunction

Function cbUnit_SetCurrentContext(current_context$)
	app.cbUnit_Application = cbUnit_GetApplication()
	app\current_context = current_context
EndFunction

Function cbUnit_Fail(message$)
	app.cbUnit_Application = cbUnit_GetApplication()
	failure.cbUnit_Failure = New(cbUnit_failure)
	failure\id = ConvertToInteger(failure)
	failure\context = app\current_context
	failure\message = message
EndFunction

Function cbUnit_Substitute(message$, a$, b$="", c$="")
	message = Replace(message, "a$", a)
	message = Replace(message, "b$", b)
	message = Replace(message, "c$", c)
	Return message
EndFunction

Function cbUnit_HasFailures()
	app.cbUnit_Application = cbunit_GetApplication()
	Return app\count_failures > 0
EndFunction

Function cbUnit_EndProgram()
	cbUnit_WriteResults(CBUNIT_OUTPUT_FILE_PATH, CBUNIT_TEST_FILE_PATH)
	End
EndFunction

Function cbUnit_WriteResults(output_file_path$, test_file_path$)
	output_file = OpenToEdit(output_file_path$)
	SeekFile output_file, FileSize(output_file_path)
	app.cbUnit_Application = cbUnit_GetApplication()
	WriteLine output_file, ""
	WriteLine output_file, test_file_path+":"
	WriteLine output_file, "  " + app\count_tests + " total tests."
	WriteLine output_file, "  " + app\count_successes + " succeeded tests."
	WriteLine output_file, "  " + app\count_failures + " failed tests."
	If app\count_failures Then
		// Write test failure messages
		WriteLine output_file, "  Failures:"
		For failure.cbUnit_Failure = Each cbUnit_Failure
			WriteLine output_file, "    " + failure\context + "():"
			WriteLine output_file, "      " + failure\message
		Next failure
	EndIf
	CloseFile output_file
EndFunction
