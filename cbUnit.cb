
// Libraries
Include "cbRepository.com.cb"

// Constants and globals
Const CBUNIT_TESTS_DIRECTORY = "tests"
Const CBUNIT_TEST_FILE_PATTERN = "test_*.cb"
Const CBUNIT_TEST_PROGRAM_FILE_NAME = "CBCompiler\Editor.out" // Our final test program will be written to this file. CBCompiler.exe expects exactly this file name.
Const CBUNIT_TEST_PROGRAM_OUTPUT_FILE_NAME = "cbUnit.results.txt" // Our final test program will write its test results to this file
Const CBUNIT_TEST_FUNCTION_PATTERN = "Function test_*(*"
Const CBUNIT_CONSTANT_PATTERN = "Const CBUNIT_*=*"
Const CBUNIT_TEST_MAIN_SKELETON = "test-main.skeleton.cb"
Const CBUNIT_TEST_CALL_SKELETON = "test-call.skeleton.cb"

Global cbUnit_StartingDirectory$ : cbUnit_StartingDirectory = CurrentDir()
Global cbUnit_ApplicationDirectory$ : cbUnit_ApplicationDirectory = CleanPath(cbUnit_StartingDirectory) // Directory where the testable application lives. If cbUnit was started from commandline or via a cmd file, CurrentDir() contains a path to where the call originated.
Global cbUnit_EOL$ : cbUnit_EOL = Chr(13) + Chr(10)
Global cbUnit_Quote$ : cbUnit_Quote = Chr(34)

// Types
Type cbUnit_TestFile
	Field id
	Field path$
EndType

Type cbUnit_TestFunction
	Field id
	Field function_name$
EndType

Type cbUnit_Setting
	Field id
	Field name$
	Field value$
	Field source$
EndType

// Main program
Function MainProgram()
	Dim output_file_path$, output_file
	Dim test_file.cbUnit_TestFile
	
	GenerateListOfTestFiles()
	
	// Reset output log file
	output_file_path$ = cbUnit_Directory(True) + CBUNIT_TEST_PROGRAM_OUTPUT_FILE_NAME
	output_file = OpenToWrite(output_file_path)
	WriteLine output_file, "cbUnit test result " + Date() + " " + Time() + ":"
	CloseFile output_file
	
	// Test Each test file
	For test_file = Each cbUnit_TestFile
		GenerateListOfTestFunctionsAndConstants(test_file\path) // ScaffoldTestProgram() needs this
		ScaffoldTestProgram(test_file\path, output_file_path, cbUnit_ApplicationDirectory)
		
		// Compile and run the test program
		CompileAndRun()
	Next test_file
	
	// Open the log file and end the program
	Execute(output_file_path)
	End
EndFunction

Function cbUnit_Directory(end_with_backslash=0)
	Dim path$
	
	// Check If cbUnit is currently run from CBEditor
	If Lower(Right(GetEXEName(), 9)) = "cbrun.exe" Then
		// cbUnit is currently run from CBEditor, so we cannot use GetEXEName() To determine the application directory because that would lead To the editor's IDE\ folder.
		// We can use cbUnit_StartingDirectory (= i.e. value of CurrentDir() at the very beginning of this program) because when compiling from CBEditor, CurrentDir() is rarely changed To point anywhere Else than To the application's directory.
		path = cbUnit_StartingDirectory
	Else
		// This is a standalone executable program. Determine the program's directory from GetEXEName(), Not from cbUnit_StartingDirectory, because that may point To a testable host application.
		path = GetEXEName() // Contains a directory And executable name
		path + "\.." // Trick CleanPath() To remove the executable name from the path.
	EndIf
	Return CleanPath(path, end_with_backslash)
EndFunction

// Compiling
Function CompileAndRun()
	Dim force_variable_declaration, instructions, command_line_parameters$, cmd, signal_file_path$

	// Write instructions For CBCompiler
	force_variable_declaration = getSetting("FORCE_VARIABLE_DECLARATION")
	instructions = OpenToWrite(cbUnit_Directory(True)+"CBCompiler\Compiler")
	WriteLine instructions, "t"+"ype=1" // 1: We want To build an exe. 0 would mean that we would only want To check syntax.
	WriteLine instructions, "sourcedir="+cbUnit_ApplicationDirectory+"\" // Application root directory. Include commands in the test_*.cb files rely ON this command.
	WriteLine instructions, "buildto=cbRun" // changing cbRun To something Else does Not work, the compiler will create a cbRun.exe file any way.
	WriteLine instructions, "force=" + force_variable_declaration // 1: turn Force Variable Declaraction ON. 0: turn it OFF.
	CloseFile instructions
	
	// Create a .cmd file that will call the compiler, Wait that it finishes, and then call the test program And Wait that it finishes, And Then Delete a signal file.
	command_line_parameters$ = getSetting("CommandLine", "")
	cmd = OpenToWrite(cbUnit_Directory(True)+"CBCompiler\call_compiler.cmd")
	WriteLine cmd, "@echo OFF"
	WriteLine cmd, "echo Preparations..."
	WriteLine cmd, "cd " + cbUnit_Quote + cbUnit_Directory(True)+"CBCompiler" + cbUnit_Quote
	WriteLine cmd, "del cbRun.exe" // Should Not exist at this point but try To Delete just in Case
	WriteLine cmd, "del cbUnitTestProgram.exe" // Should Not exist at this point but try To Delete just in Case
	WriteLine cmd, "echo Compiling..."
	WriteLine cmd, "call CBCompiler.exe"
	WriteLine cmd, "echo Running testing application..."
	WriteLine cmd, "ren cbRun.exe cbUnitTestProgram.exe"
	WriteLine cmd, "call cbUnitTestProgram.exe " + command_line_parameters
	WriteLine cmd, "echo Finishing..."
	WriteLine cmd, "del cbUnitTestProgram.exe"
	WriteLine cmd, "del signal"
	WriteLine cmd, "del CompileLog.txt"
	WriteLine cmd, "del Compiler" // Delete the instructions file
	WriteLine cmd, "del Editor.out"
	WriteLine cmd, "del %0" // Delete call_compiler.cmd
	CloseFile cmd
	
	// Signal ourself that the test program is running (actually, will soon be running)
	signal_file_path = cbUnit_Directory(True)+"CBCompiler\signal"
	CloseFile OpenToWrite(signal_file_path) // The compiler does Not use this file at all
	
	// Now we can actually compile & run the program
	Execute cbUnit_Directory(True)+"CBCompiler\call_compiler.cmd"
	
	// Wait Until the program execution is finished
	While FileExists(signal_file_path)
		Wait(100)
		// TODO: Break out If the signal file is stuck Forever.
	Wend
	// The program has finished running
EndFunction


// Generators / Scaffolders
Function ScaffoldTestProgram(test_file_path$, output_file_path$, application_directory$)
	Dim call_skeleton_file, call_skeleton$, test_program_file, runtime_setting_definitions$, main_skeleton_file, line_$, call$
	Dim test_function.cbUnit_TestFunction

	// Prepare a helper skeleton For test function calls (we will modify it later)
	call_skeleton_file = OpenToRead(cbUnit_Directory(True)+CBUNIT_TEST_CALL_SKELETON)
	call_skeleton$ = ""
	While Not EOF(call_skeleton_file)
		call_skeleton = call_skeleton + ReadLine(call_skeleton_file) + cbUnit_EOL
	Wend
	CloseFile call_skeleton_file
	
	// Prepare Write destination
	test_program_file = OpenToWrite(cbUnit_Directory(True)+CBUNIT_TEST_PROGRAM_FILE_NAME)
	
	// Write runtime settings that are Not present in the test_*.cb file
	runtime_setting_definitions = EnsureRuntimeSettingsAreDefined()
	If runtime_setting_definitions Then
		WriteLine test_program_file, "// Define runtime settings with d"+"efault values:"
		WriteLine test_program_file, runtime_setting_definitions
		WriteLine test_program_file, ""
	EndIf
	
	// Main skeleton
	main_skeleton_file = OpenToRead(cbUnit_Directory(True)+CBUNIT_TEST_MAIN_SKELETON)
	While Not EOF(main_skeleton_file)
		line_$ = ReadLine(main_skeleton_file)
		If "// INSERT TEST CALLS HERE //" = line_ Then
			// This is a mark that we should Insert test Function calls here
			For test_function = Each cbUnit_TestFunction
				call$ = call_skeleton
				call = IReplace(call, "@test_function_name", test_function\function_name)
				WriteLine test_program_file, call
			Next test_function
		Else
			// Normal code Line. Substitute variables.
			line_ = IReplace(line_, "@test_file_path", test_file_path)
			line_ = IReplace(line_, "@output_file_path", output_file_path)
			line_ = IReplace(line_, "@application_directory", application_directory)
			line_ = IReplace(line_, "@cbunit_directory", cbUnit_Directory())
			WriteLine test_program_file, line_
		EndIf
	Wend
	
	CloseFile main_skeleton_file
	CloseFile test_program_file
EndFunction

// Returns a string of constants that are not defined in the current test_*.cb file.
Function EnsureRuntimeSettingsAreDefined()
	Dim setting_definitions$, runtime_settings$, i, runtime_setting$, runtime_setting_key$, runtime_setting_value$, runtime_setting_default_value$
	Dim setting.cbUnit_Setting
	
	// Define settings And Default values. Separate settings from each other by commas, And setting keys And values by equal sign.
	runtime_settings = "STOP_AT="
	setting_definitions = ""
	For i = 1 To CountWords2(runtime_settings, ",")
		runtime_setting = GetWord2(runtime_settings, i, ",") // E.g. STOP_AT
		runtime_setting_key = GetWord2(runtime_setting, 1, "=")
		runtime_setting_default_value = GetWord2(runtime_setting, 2, "=")
		If Not isSettingDefinedInTest(runtime_setting_key) Then
			runtime_setting_value = getSetting(runtime_setting_key, runtime_setting_default_value) // Use getSetting() To try To find a setting from another source, even though it's Not defined in a test source. If that fails, Then use the Default value.
			setting_definitions = setting_definitions + "Const CBUNIT_"+runtime_setting_key+" = " + cbUnit_Quote + runtime_setting_value + cbUnit_Quote + cbUnit_EOL
		EndIf
	Next i
	
	Return setting_definitions
EndFunction

Function GenerateListOfTestFunctionsAndConstants(test_file_path$)
	Dim test_file, line_$, test_function_name$, constant_name$, setting_name$, constant_value$

	ResetTestFunctions()
	test_file = OpenToRead(test_file_path)
	While Not EOF(test_file)
		line_$ = Trim(ReadLine(test_file))
		If PatternCompare(CBUNIT_TEST_FUNCTION_PATTERN, line_, False) Then
			// This Line contains a test_*() Function definition
			// Mark up that we can call this Function
			test_function_name$ = Trim(GetBetween(line_, "Function", "(")) // TODO: Fix Case sensitivity problem with the word Function.
			NewTestFunction(test_function_name)
			
		ElseIf PatternCompare(CBUNIT_CONSTANT_PATTERN, line_, False) Then
			// This Line contains a CBUNIT_* constant definition
			// Mark up the value of it
			constant_name$ = Trim(GetBetween(line_, "Const", "=")) // TODO: Fix Case sensitivity problem with the word Const.
			setting_name$ = IReplace(constant_name, "CBUNIT_", "")
			constant_value$ = Trim(Mid(line_, InStr(line_, "=")+1))
			If Left(constant_value,1) = Chr(34) Then // Chr(34) is "
				// Remove quotes
				constant_value = GetBetween(constant_value, Chr(34), Chr(34))
			EndIf
			setSetting(setting_name, constant_value, "test")
		EndIf
	Wend
	CloseFile test_file
EndFunction

Function GenerateListOfTestFiles()
	Dim old_directory$, tests_directory_path$, file_name$
	
	old_directory = CurrentDir()
	tests_directory_path$ = cbUnit_ApplicationDirectory + "\" + CBUNIT_TESTS_DIRECTORY
	If Not IsDirectory(tests_directory_path) Then Return HandleError("getListOfTestFiles", "Directory "+tests_directory_path+" does n"+"ot exist.")
	ChDir tests_directory_path
	StartSearch
	Repeat
		file_name$ = FindFile()
		If PatternCompare(CBUNIT_TEST_FILE_PATTERN, file_name, False, "*") Then
			// This is a test_*.cb file
			NewTestFile(tests_directory_path + "\" + file_name)
		EndIf
	Until "" = file_name
	EndSearch
	ChDir old_directory
EndFunction

// Type handling
Function NewTestFile(path$)
	Dim test_file.cbUnit_TestFile
	
	test_file = New(cbUnit_TestFile)
	test_file\id = ConvertToInteger(test_file)
	test_file\path = path
	Return test_file\id
EndFunction

Function NewTestFunction(function_name$)
	Dim test_function.cbUnit_TestFunction
	
	test_function = New(cbUnit_TestFunction)
	test_function\id = ConvertToInteger(test_function)
	test_function\function_name = function_name
	Return test_function\id
EndFunction

Function ResetTestFunctions()
	Dim test_function.cbUnit_TestFunction
	
	For test_function = Each cbUnit_TestFunction
		Delete test_function
	Next test_function
EndFunction

// Settings
// source: "test" if the setting was set via a constant in a test_*.cb file. Currently there are no other source possibilities, but might be in the future.
Function setSetting(name$, value$, source$)
	Dim setting.cbUnit_Setting
	
	name = Upper(name)
	setting = getSettingInstance(name)
	If setting = NULL Then setting.cbUnit_Setting = New(cbUnit_Setting)
	setting\id = ConvertToInteger(setting)
	setting\name = name
	setting\value = value
	setting\source = source // Even If the setting was already loaded from another source, update here the latest source information.
EndFunction

Function getSetting(name$, if_not_found$="")
	Dim setting.cbUnit_Setting
	
	setting = getSettingInstance(name)
	If setting = NULL Then Return if_not_found
	Return setting\value
EndFunction

Function getSettingInstance(name$)
	Dim setting.cbUnit_Setting
	
	name = Upper(name)
	For setting = Each cbUnit_Setting
		If setting\name = name Then Return setting\id
	Next setting
	Return 0
EndFunction

// Tells if a certain setting is defined as a constant in the current test_*.cb file. This information is needed to be able to declare those constants automatically in case if they are not defined in the test file. Otherwise FVD will break and handling default values for runtime settings would be difficult.
Function isSettingDefinedInTest(name$)
	Dim setting.cbUnit_Setting
	
	setting = getSettingInstance(name)
	If NULL <> setting Then
		Return setting\source = "test"
	EndIf
	Return False
EndFunction

// Error handling
Function HandleError(function_name$, message$)
	MakeError function_name+"(): "+message
EndFunction

// Start main program
MainProgram()