
Include "cbRepository.com.cb"

Const cbUnit_TESTS_DIRECTORY = ".."
Const cbUnit_TEST_FILE_PATTERN = "test_*.cb"
Const cbUnit_TEST_PROGRAM_FILE_NAME = "CBCompiler\Editor.out" // Our final test program will be written to this file. CBCompiler.exe expects exactly this file name.
Const cbUnit_TEST_PROGRAM_OUTPUT_FILE_NAME = "cbUnit.results.txt" // Our final test program will write its test results to this file
Const cbUnit_TEST_FUNCTION_PATTERN = "*Function test_*(*"
Const cbUnit_TEST_MAIN_SKELETON = "test-main.skeleton.cb"
Const cbUnit_TEST_CALL_SKELETON = "test-call.skeleton.cb"

Global cbUnit_Directory$ : cbUnit_Directory = CurrentDir() // Direcotry of the cbUnit program
Global cbUnit_ApplicationDirectory$ : cbUnit_ApplicationDirectory = CurrentDir() + "..\.." // Directory where the testable application lives
Global cbUnit_EOL$ : cbUnit_EOL = Chr(13) + Chr(10)

Type cbUnit_TestFile
	Field id
	Field path$
EndType

Type cbUnit_TestFunction
	Field id
	Field function_name$
EndType


GenerateListOfTestFiles()


// Reset output log file
output_file_path$ = cbUnit_Directory + "\" + cbUnit_TEST_PROGRAM_OUTPUT_FILE_NAME
output_file = OpenToWrite(output_file_path)
WriteLine output_file, "cbUnit test result " + Date() + " " + Time() + ":"
CloseFile output_file

// Test each test file
For test_file.cbUnit_TestFile = Each cbUnit_TestFile
	GenerateListOfTestFunctions(test_file\path) // ScaffoldTestProgram() needs this
	ScaffoldTestProgram(test_file\path, output_file_path, cbUnit_ApplicationDirectory)
	
	// Compile and run the test program
	CompileAndRun()
Next test_file

// Open the log file and end the program
Execute(output_file_path)
End

Function CompileAndRun()
	// Write instructions For CBCompiler
	instructions = OpenToWrite("CBCompiler\Compiler")
	WriteLine instructions, "t"+"ype=1"
	WriteLine instructions, "sourcedir="
	WriteLine instructions, "buildto=cbRun" // changing cbRun To something Else does Not work, the compiler will create a cbRun.exe file any way.
	WriteLine instructions, "force=0" // I guess that this could be used To turn Force Variable Declaraction ON, but I haven't tested.
	CloseFile instructions
	
	// Create a .cmd file that will call the compiler, Wait that it finishes, and then call the test program And Wait that it finishes, And Then Delete a signal file.
	cmd = OpenToWrite("CBCompiler\compiler.cmd")
	WriteLine cmd, "cd CBCompiler"
	WriteLine cmd, "del cbRun.exe" // Should Not exist at this point but try To Delete just in Case
	WriteLine cmd, "del cbUnitTestProgram.exe" // Should Not exist at this point but try To Delete just in Case
	WriteLine cmd, "call CBCompiler.exe"
	WriteLine cmd, "ren cbRun.exe cbUnitTestProgram.exe"
	WriteLine cmd, "call cbUnitTestProgram.exe"
	WriteLine cmd, "del cbUnitTestProgram.exe"
	WriteLine cmd, "del signal"
	CloseFile cmd
	
	// Signal ourself that the test program is running (actually, will soon be running)
	CloseFile OpenToWrite("CBCompiler\signal") // The compiler does Not use this file at all
	
	// Now we can actually compile & run the program
	Execute "CBCompiler\compiler.cmd"
	
	// Wait Until the program execution is finished
	While FileExists("CBCompiler\signal")
		Wait(100)
		// TODO: Break out If the signal file is stuck Forever.
	Wend
	// The program has finished running
EndFunction


Function ScaffoldTestProgram(test_file_path$, output_file_path$, application_directory$)
	// Prepare a helper skeleton For test function calls (we will modify it later)
	call_skeleton_file = OpenToRead(cbUnit_TEST_CALL_SKELETON)
	call_skeleton$ = ""
	While Not EOF(call_skeleton_file)
		call_skeleton = call_skeleton + ReadLine(call_skeleton_file) + cbUnit_EOL
	Wend
	CloseFile call_skeleton_file
	
	// Prepare Write destination
	test_program_file = OpenToWrite(cbUnit_TEST_PROGRAM_FILE_NAME)
	
	// Main skeleton
	main_skeleton_file = OpenToRead(cbUnit_TEST_MAIN_SKELETON)
	While Not EOF(main_skeleton_file)
		line_$ = ReadLine(main_skeleton_file)
		If "// INSERT TEST CALLS HERE //" = line_ Then
			// This is a mark that we should Insert test Function calls here
			For test_function.cbUnit_TestFunction = Each cbUnit_TestFunction
				call$ = call_skeleton
				call = IReplace(call, "@test_function_name", test_function\function_name)
				WriteLine test_program_file, call
			Next test_function
		Else
			// Normal code Line. Substitute variables.
			line_ = IReplace(line_, "@test_file_path", test_file_path)
			line_ = IReplace(line_, "@output_file_path", output_file_path)
			line_ = IReplace(line_, "@application_directory", application_directory)
			WriteLine test_program_file, line_
		EndIf
	Wend
	
	CloseFile main_skeleton_file
	CloseFile test_program_file
EndFunction

Function GenerateListOfTestFunctions(test_file_path$)
	ResetTestFunctions()
	test_file = OpenToRead(test_file_path)
	While Not EOF(test_file)
		line_$ = ReadLine(test_file)
		If PatternCompare(cbUnit_TEST_FUNCTION_PATTERN, line_, False) Then
			// This Line contains a test_*() Function definition
			// Mark up that we can call this Function
			test_function_name$ = Trim(GetBetween(line_, "Function", "(")) // TODO: Fix Case sensitivity problem with the word Function.
			NewTestFunction(test_function_name)
		EndIf
	Wend
	CloseFile test_file
EndFunction

Function GenerateListOfTestFiles()
	If Not IsDirectory(cbUnit_TESTS_DIRECTORY) Then Return HandleError("getListOfTestFiles", "Directory "+cbUnit_TESTS_DIRECTORY+" does n"+"ot exist.")
	ChDir cbUnit_TESTS_DIRECTORY
	StartSearch
	Repeat
		file_name$ = FindFile()
		If PatternCompare(cbUnit_TEST_FILE_PATTERN, file_name, False, "*") Then
			// This is a test_*.cb file
			NewTestFile(cbUnit_TESTS_DIRECTORY + "\" + file_name)
		EndIf
	Until "" = file_name
	EndSearch
	ChDir cbUnit_Directory
EndFunction

Function NewTestFile(path$)
	test_file.cbUnit_TestFile = New(cbUnit_TestFile)
	test_file\id = ConvertToInteger(test_file)
	test_file\path = path
	Return test_file\id
EndFunction

Function NewTestFunction(function_name$)
	test_function.cbUnit_TestFunction = New(cbUnit_TestFunction)
	test_function\id = ConvertToInteger(test_function)
	test_function\function_name = function_name
	Return test_function\id
EndFunction

Function ResetTestFunctions()
	For test_function.cbUnit_TestFunction = Each cbUnit_TestFunction
		Delete test_function
	Next test_function
EndFunction


Function HandleError(function_name$, message$)
	MakeError function_name+"(): "+message
EndFunction
